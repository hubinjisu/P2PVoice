package com.hubin.android.p2pvoice.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hubin.android.p2pvoice.bean.dao.Pointer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POINTER.
*/
public class PointerDao extends AbstractDao<Pointer, Long> {

    public static final String TABLENAME = "POINTER";

    /**
     * Properties of entity Pointer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateDate = new Property(1, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Ip = new Property(3, String.class, "ip", false, "IP");
        public final static Property Port = new Property(4, Integer.class, "port", false, "PORT");
        public final static Property AudioSampleRate = new Property(5, Integer.class, "audioSampleRate", false, "AUDIO_SAMPLE_RATE");
        public final static Property IsRecordSend = new Property(6, Boolean.class, "isRecordSend", false, "IS_RECORD_SEND");
        public final static Property IsRecordReceive = new Property(7, Boolean.class, "isRecordReceive", false, "IS_RECORD_RECEIVE");
    };


    public PointerDao(DaoConfig config) {
        super(config);
    }
    
    public PointerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POINTER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CREATE_DATE' INTEGER," + // 1: createDate
                "'NAME' TEXT," + // 2: name
                "'IP' TEXT NOT NULL ," + // 3: ip
                "'PORT' INTEGER," + // 4: port
                "'AUDIO_SAMPLE_RATE' INTEGER," + // 5: audioSampleRate
                "'IS_RECORD_SEND' INTEGER," + // 6: isRecordSend
                "'IS_RECORD_RECEIVE' INTEGER);"); // 7: isRecordReceive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POINTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pointer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(2, createDate.getTime());
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindString(4, entity.getIp());
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(5, port);
        }
 
        Integer audioSampleRate = entity.getAudioSampleRate();
        if (audioSampleRate != null) {
            stmt.bindLong(6, audioSampleRate);
        }
 
        Boolean isRecordSend = entity.getIsRecordSend();
        if (isRecordSend != null) {
            stmt.bindLong(7, isRecordSend ? 1l: 0l);
        }
 
        Boolean isRecordReceive = entity.getIsRecordReceive();
        if (isRecordReceive != null) {
            stmt.bindLong(8, isRecordReceive ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pointer readEntity(Cursor cursor, int offset) {
        Pointer entity = new Pointer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // ip
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // port
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // audioSampleRate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isRecordSend
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isRecordReceive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pointer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIp(cursor.getString(offset + 3));
        entity.setPort(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAudioSampleRate(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsRecordSend(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsRecordReceive(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Pointer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Pointer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
