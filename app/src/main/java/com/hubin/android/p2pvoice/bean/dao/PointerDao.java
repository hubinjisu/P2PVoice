package com.hubin.android.p2pvoice.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.hubin.android.p2pvoice.bean.Pointer;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Pointer".
*/
public class PointerDao extends AbstractDao<Pointer, Long> {

    public static final String TABLENAME = "Pointer";

    /**
     * Properties of entity Pointer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CreateDate = new Property(2, long.class, "createDate", false, "createDate");
        public final static Property Ip = new Property(3, String.class, "ip", false, "ip");
        public final static Property Port = new Property(4, int.class, "port", false, "port");
        public final static Property AudioSampleRate = new Property(5, int.class, "audioSampleRate", false, "audioSampleRate");
        public final static Property IsRecordSend = new Property(6, boolean.class, "isRecordSend", false, "isRecordSend");
        public final static Property IsRecordReceive = new Property(7, boolean.class, "isRecordReceive", false, "isRecordReceive");
    }


    public PointerDao(DaoConfig config) {
        super(config);
    }
    
    public PointerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Pointer\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"createDate\" INTEGER NOT NULL ," + // 2: createDate
                "\"ip\" TEXT NOT NULL ," + // 3: ip
                "\"port\" INTEGER NOT NULL ," + // 4: port
                "\"audioSampleRate\" INTEGER NOT NULL ," + // 5: audioSampleRate
                "\"isRecordSend\" INTEGER NOT NULL ," + // 6: isRecordSend
                "\"isRecordReceive\" INTEGER NOT NULL );"); // 7: isRecordReceive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Pointer\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pointer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindString(4, entity.getIp());
        stmt.bindLong(5, entity.getPort());
        stmt.bindLong(6, entity.getAudioSampleRate());
        stmt.bindLong(7, entity.getIsRecordSend() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsRecordReceive() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pointer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getCreateDate());
        stmt.bindString(4, entity.getIp());
        stmt.bindLong(5, entity.getPort());
        stmt.bindLong(6, entity.getAudioSampleRate());
        stmt.bindLong(7, entity.getIsRecordSend() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsRecordReceive() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pointer readEntity(Cursor cursor, int offset) {
        Pointer entity = new Pointer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // createDate
            cursor.getString(offset + 3), // ip
            cursor.getInt(offset + 4), // port
            cursor.getInt(offset + 5), // audioSampleRate
            cursor.getShort(offset + 6) != 0, // isRecordSend
            cursor.getShort(offset + 7) != 0 // isRecordReceive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pointer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.getLong(offset + 2));
        entity.setIp(cursor.getString(offset + 3));
        entity.setPort(cursor.getInt(offset + 4));
        entity.setAudioSampleRate(cursor.getInt(offset + 5));
        entity.setIsRecordSend(cursor.getShort(offset + 6) != 0);
        entity.setIsRecordReceive(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pointer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pointer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pointer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
